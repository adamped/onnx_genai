// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class onnx_genai {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  onnx_genai(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  onnx_genai.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void OgaShutdown() {
    return _OgaShutdown();
  }

  late final _OgaShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OgaShutdown');
  late final _OgaShutdown = _OgaShutdownPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> OgaResultGetError(
    ffi.Pointer<OgaResult> result,
  ) {
    return _OgaResultGetError(
      result,
    );
  }

  late final _OgaResultGetErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<OgaResult>)>>('OgaResultGetError');
  late final _OgaResultGetError = _OgaResultGetErrorPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<OgaResult>)>();

  ffi.Pointer<OgaResult> OgaSetLogBool(
    ffi.Pointer<ffi.Char> name,
    bool value,
  ) {
    return _OgaSetLogBool(
      name,
      value,
    );
  }

  late final _OgaSetLogBoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<ffi.Char>, ffi.Bool)>>('OgaSetLogBool');
  late final _OgaSetLogBool = _OgaSetLogBoolPtr.asFunction<
      ffi.Pointer<OgaResult> Function(ffi.Pointer<ffi.Char>, bool)>();

  ffi.Pointer<OgaResult> OgaSetLogString(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _OgaSetLogString(
      name,
      value,
    );
  }

  late final _OgaSetLogStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('OgaSetLogString');
  late final _OgaSetLogString = _OgaSetLogStringPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void OgaDestroyResult(
    ffi.Pointer<OgaResult> arg0,
  ) {
    return _OgaDestroyResult(
      arg0,
    );
  }

  late final _OgaDestroyResultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaResult>)>>(
          'OgaDestroyResult');
  late final _OgaDestroyResult =
      _OgaDestroyResultPtr.asFunction<void Function(ffi.Pointer<OgaResult>)>();

  void OgaDestroyString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _OgaDestroyString(
      arg0,
    );
  }

  late final _OgaDestroyStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'OgaDestroyString');
  late final _OgaDestroyString =
      _OgaDestroyStringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void OgaDestroyNamedTensors(
    ffi.Pointer<OgaNamedTensors> arg0,
  ) {
    return _OgaDestroyNamedTensors(
      arg0,
    );
  }

  late final _OgaDestroyNamedTensorsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaNamedTensors>)>>(
      'OgaDestroyNamedTensors');
  late final _OgaDestroyNamedTensors = _OgaDestroyNamedTensorsPtr.asFunction<
      void Function(ffi.Pointer<OgaNamedTensors>)>();

  ffi.Pointer<OgaResult> OgaCreateSequences(
    ffi.Pointer<ffi.Pointer<OgaSequences>> out,
  ) {
    return _OgaCreateSequences(
      out,
    );
  }

  late final _OgaCreateSequencesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<ffi.Pointer<OgaSequences>>)>>('OgaCreateSequences');
  late final _OgaCreateSequences = _OgaCreateSequencesPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<ffi.Pointer<OgaSequences>>)>();

  void OgaDestroySequences(
    ffi.Pointer<OgaSequences> sequences,
  ) {
    return _OgaDestroySequences(
      sequences,
    );
  }

  late final _OgaDestroySequencesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaSequences>)>>(
          'OgaDestroySequences');
  late final _OgaDestroySequences = _OgaDestroySequencesPtr.asFunction<
      void Function(ffi.Pointer<OgaSequences>)>();

  int OgaSequencesCount(
    ffi.Pointer<OgaSequences> sequences,
  ) {
    return _OgaSequencesCount(
      sequences,
    );
  }

  late final _OgaSequencesCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OgaSequences>)>>(
          'OgaSequencesCount');
  late final _OgaSequencesCount = _OgaSequencesCountPtr.asFunction<
      int Function(ffi.Pointer<OgaSequences>)>();

  int OgaSequencesGetSequenceCount(
    ffi.Pointer<OgaSequences> sequences,
    int sequence_index,
  ) {
    return _OgaSequencesGetSequenceCount(
      sequences,
      sequence_index,
    );
  }

  late final _OgaSequencesGetSequenceCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<OgaSequences>,
              ffi.Size)>>('OgaSequencesGetSequenceCount');
  late final _OgaSequencesGetSequenceCount = _OgaSequencesGetSequenceCountPtr
      .asFunction<int Function(ffi.Pointer<OgaSequences>, int)>();

  ffi.Pointer<ffi.Int32> OgaSequencesGetSequenceData(
    ffi.Pointer<OgaSequences> sequences,
    int sequence_index,
  ) {
    return _OgaSequencesGetSequenceData(
      sequences,
      sequence_index,
    );
  }

  late final _OgaSequencesGetSequenceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<OgaSequences>,
              ffi.Size)>>('OgaSequencesGetSequenceData');
  late final _OgaSequencesGetSequenceData =
      _OgaSequencesGetSequenceDataPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<OgaSequences>, int)>();

  ffi.Pointer<OgaResult> OgaLoadImage(
    ffi.Pointer<ffi.Char> image_path,
    ffi.Pointer<ffi.Pointer<OgaImages>> images,
  ) {
    return _OgaLoadImage(
      image_path,
      images,
    );
  }

  late final _OgaLoadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<OgaImages>>)>>('OgaLoadImage');
  late final _OgaLoadImage = _OgaLoadImagePtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<OgaImages>>)>();

  void OgaDestroyImages(
    ffi.Pointer<OgaImages> images,
  ) {
    return _OgaDestroyImages(
      images,
    );
  }

  late final _OgaDestroyImagesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaImages>)>>(
          'OgaDestroyImages');
  late final _OgaDestroyImages =
      _OgaDestroyImagesPtr.asFunction<void Function(ffi.Pointer<OgaImages>)>();

  ffi.Pointer<OgaResult> OgaCreateModel(
    ffi.Pointer<ffi.Char> config_path,
    ffi.Pointer<ffi.Pointer<OgaModel>> out,
  ) {
    return _OgaCreateModel(
      config_path,
      out,
    );
  }

  late final _OgaCreateModelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<OgaModel>>)>>('OgaCreateModel');
  late final _OgaCreateModel = _OgaCreateModelPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<OgaModel>>)>();

  void OgaDestroyModel(
    ffi.Pointer<OgaModel> model,
  ) {
    return _OgaDestroyModel(
      model,
    );
  }

  late final _OgaDestroyModelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaModel>)>>(
          'OgaDestroyModel');
  late final _OgaDestroyModel =
      _OgaDestroyModelPtr.asFunction<void Function(ffi.Pointer<OgaModel>)>();

  ffi.Pointer<OgaResult> OgaGenerate(
    ffi.Pointer<OgaModel> model,
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<ffi.Pointer<OgaSequences>> out,
  ) {
    return _OgaGenerate(
      model,
      generator_params,
      out,
    );
  }

  late final _OgaGeneratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaModel>,
              ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Pointer<OgaSequences>>)>>('OgaGenerate');
  late final _OgaGenerate = _OgaGeneratePtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaModel>,
          ffi.Pointer<OgaGeneratorParams>,
          ffi.Pointer<ffi.Pointer<OgaSequences>>)>();

  ffi.Pointer<OgaResult> OgaCreateGeneratorParams(
    ffi.Pointer<OgaModel> model,
    ffi.Pointer<ffi.Pointer<OgaGeneratorParams>> out,
  ) {
    return _OgaCreateGeneratorParams(
      model,
      out,
    );
  }

  late final _OgaCreateGeneratorParamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaModel>,
                  ffi.Pointer<ffi.Pointer<OgaGeneratorParams>>)>>(
      'OgaCreateGeneratorParams');
  late final _OgaCreateGeneratorParams =
      _OgaCreateGeneratorParamsPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaModel>,
              ffi.Pointer<ffi.Pointer<OgaGeneratorParams>>)>();

  void OgaDestroyGeneratorParams(
    ffi.Pointer<OgaGeneratorParams> generator_params,
  ) {
    return _OgaDestroyGeneratorParams(
      generator_params,
    );
  }

  late final _OgaDestroyGeneratorParamsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OgaGeneratorParams>)>>(
      'OgaDestroyGeneratorParams');
  late final _OgaDestroyGeneratorParams = _OgaDestroyGeneratorParamsPtr
      .asFunction<void Function(ffi.Pointer<OgaGeneratorParams>)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetSearchNumber(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<ffi.Char> name,
    double value,
  ) {
    return _OgaGeneratorParamsSetSearchNumber(
      generator_params,
      name,
      value,
    );
  }

  late final _OgaGeneratorParamsSetSearchNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Char>,
              ffi.Double)>>('OgaGeneratorParamsSetSearchNumber');
  late final _OgaGeneratorParamsSetSearchNumber =
      _OgaGeneratorParamsSetSearchNumberPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Char>, double)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetSearchBool(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<ffi.Char> name,
    bool value,
  ) {
    return _OgaGeneratorParamsSetSearchBool(
      generator_params,
      name,
      value,
    );
  }

  late final _OgaGeneratorParamsSetSearchBoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('OgaGeneratorParamsSetSearchBool');
  late final _OgaGeneratorParamsSetSearchBool =
      _OgaGeneratorParamsSetSearchBoolPtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>, ffi.Pointer<ffi.Char>, bool)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    int max_batch_size,
  ) {
    return _OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(
      generator_params,
      max_batch_size,
    );
  }

  late final _OgaGeneratorParamsTryGraphCaptureWithMaxBatchSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGeneratorParams>,
              ffi.Int32)>>('OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize');
  late final _OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize =
      _OgaGeneratorParamsTryGraphCaptureWithMaxBatchSizePtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>, int)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetInputIDs(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<ffi.Int32> input_ids,
    int input_ids_count,
    int sequence_length,
    int batch_size,
  ) {
    return _OgaGeneratorParamsSetInputIDs(
      generator_params,
      input_ids,
      input_ids_count,
      sequence_length,
      batch_size,
    );
  }

  late final _OgaGeneratorParamsSetInputIDsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Int32>,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('OgaGeneratorParamsSetInputIDs');
  late final _OgaGeneratorParamsSetInputIDs =
      _OgaGeneratorParamsSetInputIDsPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Int32>, int, int, int)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetInputSequences(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<OgaSequences> sequences,
  ) {
    return _OgaGeneratorParamsSetInputSequences(
      generator_params,
      sequences,
    );
  }

  late final _OgaGeneratorParamsSetInputSequencesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(
                  ffi.Pointer<OgaGeneratorParams>, ffi.Pointer<OgaSequences>)>>(
      'OgaGeneratorParamsSetInputSequences');
  late final _OgaGeneratorParamsSetInputSequences =
      _OgaGeneratorParamsSetInputSequencesPtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>, ffi.Pointer<OgaSequences>)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetInputs(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<OgaNamedTensors> named_tensors,
  ) {
    return _OgaGeneratorParamsSetInputs(
      generator_params,
      named_tensors,
    );
  }

  late final _OgaGeneratorParamsSetInputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<OgaNamedTensors>)>>('OgaGeneratorParamsSetInputs');
  late final _OgaGeneratorParamsSetInputs =
      _OgaGeneratorParamsSetInputsPtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>, ffi.Pointer<OgaNamedTensors>)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetModelInput(
    ffi.Pointer<OgaGeneratorParams> generator_params,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<OgaTensor> tensor,
  ) {
    return _OgaGeneratorParamsSetModelInput(
      generator_params,
      name,
      tensor,
    );
  }

  late final _OgaGeneratorParamsSetModelInputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<OgaTensor>)>>('OgaGeneratorParamsSetModelInput');
  late final _OgaGeneratorParamsSetModelInput =
      _OgaGeneratorParamsSetModelInputPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<OgaTensor>)>();

  ffi.Pointer<OgaResult> OgaGeneratorParamsSetWhisperInputFeatures(
    ffi.Pointer<OgaGeneratorParams> arg0,
    ffi.Pointer<OgaTensor> tensor,
  ) {
    return _OgaGeneratorParamsSetWhisperInputFeatures(
      arg0,
      tensor,
    );
  }

  late final _OgaGeneratorParamsSetWhisperInputFeaturesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(
                  ffi.Pointer<OgaGeneratorParams>, ffi.Pointer<OgaTensor>)>>(
      'OgaGeneratorParamsSetWhisperInputFeatures');
  late final _OgaGeneratorParamsSetWhisperInputFeatures =
      _OgaGeneratorParamsSetWhisperInputFeaturesPtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGeneratorParams>, ffi.Pointer<OgaTensor>)>();

  ffi.Pointer<OgaResult> OgaCreateGenerator(
    ffi.Pointer<OgaModel> model,
    ffi.Pointer<OgaGeneratorParams> params,
    ffi.Pointer<ffi.Pointer<OgaGenerator>> out,
  ) {
    return _OgaCreateGenerator(
      model,
      params,
      out,
    );
  }

  late final _OgaCreateGeneratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaModel>,
              ffi.Pointer<OgaGeneratorParams>,
              ffi.Pointer<ffi.Pointer<OgaGenerator>>)>>('OgaCreateGenerator');
  late final _OgaCreateGenerator = _OgaCreateGeneratorPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaModel>,
          ffi.Pointer<OgaGeneratorParams>,
          ffi.Pointer<ffi.Pointer<OgaGenerator>>)>();

  void OgaDestroyGenerator(
    ffi.Pointer<OgaGenerator> generator,
  ) {
    return _OgaDestroyGenerator(
      generator,
    );
  }

  late final _OgaDestroyGeneratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaGenerator>)>>(
          'OgaDestroyGenerator');
  late final _OgaDestroyGenerator = _OgaDestroyGeneratorPtr.asFunction<
      void Function(ffi.Pointer<OgaGenerator>)>();

  bool OgaGenerator_IsDone(
    ffi.Pointer<OgaGenerator> generator,
  ) {
    return _OgaGenerator_IsDone(
      generator,
    );
  }

  late final _OgaGenerator_IsDonePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<OgaGenerator>)>>(
          'OgaGenerator_IsDone');
  late final _OgaGenerator_IsDone = _OgaGenerator_IsDonePtr.asFunction<
      bool Function(ffi.Pointer<OgaGenerator>)>();

  ffi.Pointer<OgaResult> OgaGenerator_ComputeLogits(
    ffi.Pointer<OgaGenerator> generator,
  ) {
    return _OgaGenerator_ComputeLogits(
      generator,
    );
  }

  late final _OgaGenerator_ComputeLogitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGenerator>)>>('OgaGenerator_ComputeLogits');
  late final _OgaGenerator_ComputeLogits = _OgaGenerator_ComputeLogitsPtr
      .asFunction<ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGenerator>)>();

  ffi.Pointer<OgaResult> OgaGenerator_GenerateNextToken(
    ffi.Pointer<OgaGenerator> generator,
  ) {
    return _OgaGenerator_GenerateNextToken(
      generator,
    );
  }

  late final _OgaGenerator_GenerateNextTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaGenerator>)>>('OgaGenerator_GenerateNextToken');
  late final _OgaGenerator_GenerateNextToken =
      _OgaGenerator_GenerateNextTokenPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaGenerator>)>();

  int OgaGenerator_GetSequenceCount(
    ffi.Pointer<OgaGenerator> generator,
    int index,
  ) {
    return _OgaGenerator_GetSequenceCount(
      generator,
      index,
    );
  }

  late final _OgaGenerator_GetSequenceCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<OgaGenerator>,
              ffi.Size)>>('OgaGenerator_GetSequenceCount');
  late final _OgaGenerator_GetSequenceCount = _OgaGenerator_GetSequenceCountPtr
      .asFunction<int Function(ffi.Pointer<OgaGenerator>, int)>();

  ffi.Pointer<ffi.Int32> OgaGenerator_GetSequenceData(
    ffi.Pointer<OgaGenerator> generator,
    int index,
  ) {
    return _OgaGenerator_GetSequenceData(
      generator,
      index,
    );
  }

  late final _OgaGenerator_GetSequenceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<OgaGenerator>,
              ffi.Size)>>('OgaGenerator_GetSequenceData');
  late final _OgaGenerator_GetSequenceData =
      _OgaGenerator_GetSequenceDataPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<OgaGenerator>, int)>();

  ffi.Pointer<OgaResult> OgaCreateTokenizer(
    ffi.Pointer<OgaModel> model,
    ffi.Pointer<ffi.Pointer<OgaTokenizer>> out,
  ) {
    return _OgaCreateTokenizer(
      model,
      out,
    );
  }

  late final _OgaCreateTokenizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaModel>,
              ffi.Pointer<ffi.Pointer<OgaTokenizer>>)>>('OgaCreateTokenizer');
  late final _OgaCreateTokenizer = _OgaCreateTokenizerPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaModel>, ffi.Pointer<ffi.Pointer<OgaTokenizer>>)>();

  void OgaDestroyTokenizer(
    ffi.Pointer<OgaTokenizer> arg0,
  ) {
    return _OgaDestroyTokenizer(
      arg0,
    );
  }

  late final _OgaDestroyTokenizerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaTokenizer>)>>(
          'OgaDestroyTokenizer');
  late final _OgaDestroyTokenizer = _OgaDestroyTokenizerPtr.asFunction<
      void Function(ffi.Pointer<OgaTokenizer>)>();

  ffi.Pointer<OgaResult> OgaCreateMultiModalProcessor(
    ffi.Pointer<OgaModel> model,
    ffi.Pointer<ffi.Pointer<OgaMultiModalProcessor>> out,
  ) {
    return _OgaCreateMultiModalProcessor(
      model,
      out,
    );
  }

  late final _OgaCreateMultiModalProcessorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaModel>,
                  ffi.Pointer<ffi.Pointer<OgaMultiModalProcessor>>)>>(
      'OgaCreateMultiModalProcessor');
  late final _OgaCreateMultiModalProcessor =
      _OgaCreateMultiModalProcessorPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaModel>,
              ffi.Pointer<ffi.Pointer<OgaMultiModalProcessor>>)>();

  void OgaDestroyMultiModalProcessor(
    ffi.Pointer<OgaMultiModalProcessor> processor,
  ) {
    return _OgaDestroyMultiModalProcessor(
      processor,
    );
  }

  late final _OgaDestroyMultiModalProcessorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OgaMultiModalProcessor>)>>(
      'OgaDestroyMultiModalProcessor');
  late final _OgaDestroyMultiModalProcessor = _OgaDestroyMultiModalProcessorPtr
      .asFunction<void Function(ffi.Pointer<OgaMultiModalProcessor>)>();

  ffi.Pointer<OgaResult> OgaTokenizerEncode(
    ffi.Pointer<OgaTokenizer> arg0,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<OgaSequences> sequences,
  ) {
    return _OgaTokenizerEncode(
      arg0,
      str,
      sequences,
    );
  }

  late final _OgaTokenizerEncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaTokenizer>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<OgaSequences>)>>('OgaTokenizerEncode');
  late final _OgaTokenizerEncode = _OgaTokenizerEncodePtr.asFunction<
      ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTokenizer>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<OgaSequences>)>();

  ffi.Pointer<OgaResult> OgaProcessorProcessImages(
    ffi.Pointer<OgaMultiModalProcessor> arg0,
    ffi.Pointer<ffi.Char> prompt,
    ffi.Pointer<OgaImages> images,
    ffi.Pointer<ffi.Pointer<OgaNamedTensors>> input_tensors,
  ) {
    return _OgaProcessorProcessImages(
      arg0,
      prompt,
      images,
      input_tensors,
    );
  }

  late final _OgaProcessorProcessImagesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(
                  ffi.Pointer<OgaMultiModalProcessor>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<OgaImages>,
                  ffi.Pointer<ffi.Pointer<OgaNamedTensors>>)>>(
      'OgaProcessorProcessImages');
  late final _OgaProcessorProcessImages =
      _OgaProcessorProcessImagesPtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaMultiModalProcessor>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<OgaImages>,
              ffi.Pointer<ffi.Pointer<OgaNamedTensors>>)>();

  ffi.Pointer<OgaResult> OgaTokenizerDecode(
    ffi.Pointer<OgaTokenizer> arg0,
    ffi.Pointer<ffi.Int32> tokens,
    int token_count,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_string,
  ) {
    return _OgaTokenizerDecode(
      arg0,
      tokens,
      token_count,
      out_string,
    );
  }

  late final _OgaTokenizerDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaTokenizer>,
              ffi.Pointer<ffi.Int32>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('OgaTokenizerDecode');
  late final _OgaTokenizerDecode = _OgaTokenizerDecodePtr.asFunction<
      ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTokenizer>,
          ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<OgaResult> OgaProcessorDecode(
    ffi.Pointer<OgaMultiModalProcessor> arg0,
    ffi.Pointer<ffi.Int32> tokens,
    int token_count,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_string,
  ) {
    return _OgaProcessorDecode(
      arg0,
      tokens,
      token_count,
      out_string,
    );
  }

  late final _OgaProcessorDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaMultiModalProcessor>,
              ffi.Pointer<ffi.Int32>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('OgaProcessorDecode');
  late final _OgaProcessorDecode = _OgaProcessorDecodePtr.asFunction<
      ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaMultiModalProcessor>,
          ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<OgaResult> OgaCreateTokenizerStream(
    ffi.Pointer<OgaTokenizer> arg0,
    ffi.Pointer<ffi.Pointer<OgaTokenizerStream>> out,
  ) {
    return _OgaCreateTokenizerStream(
      arg0,
      out,
    );
  }

  late final _OgaCreateTokenizerStreamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTokenizer>,
                  ffi.Pointer<ffi.Pointer<OgaTokenizerStream>>)>>(
      'OgaCreateTokenizerStream');
  late final _OgaCreateTokenizerStream =
      _OgaCreateTokenizerStreamPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTokenizer>,
              ffi.Pointer<ffi.Pointer<OgaTokenizerStream>>)>();

  ffi.Pointer<OgaResult> OgaCreateTokenizerStreamFromProcessor(
    ffi.Pointer<OgaMultiModalProcessor> arg0,
    ffi.Pointer<ffi.Pointer<OgaTokenizerStream>> out,
  ) {
    return _OgaCreateTokenizerStreamFromProcessor(
      arg0,
      out,
    );
  }

  late final _OgaCreateTokenizerStreamFromProcessorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(
                  ffi.Pointer<OgaMultiModalProcessor>,
                  ffi.Pointer<ffi.Pointer<OgaTokenizerStream>>)>>(
      'OgaCreateTokenizerStreamFromProcessor');
  late final _OgaCreateTokenizerStreamFromProcessor =
      _OgaCreateTokenizerStreamFromProcessorPtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaMultiModalProcessor>,
              ffi.Pointer<ffi.Pointer<OgaTokenizerStream>>)>();

  void OgaDestroyTokenizerStream(
    ffi.Pointer<OgaTokenizerStream> arg0,
  ) {
    return _OgaDestroyTokenizerStream(
      arg0,
    );
  }

  late final _OgaDestroyTokenizerStreamPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OgaTokenizerStream>)>>(
      'OgaDestroyTokenizerStream');
  late final _OgaDestroyTokenizerStream = _OgaDestroyTokenizerStreamPtr
      .asFunction<void Function(ffi.Pointer<OgaTokenizerStream>)>();

  ffi.Pointer<OgaResult> OgaTokenizerStreamDecode(
    ffi.Pointer<OgaTokenizerStream> arg0,
    int token,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _OgaTokenizerStreamDecode(
      arg0,
      token,
      out,
    );
  }

  late final _OgaTokenizerStreamDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<OgaTokenizerStream>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('OgaTokenizerStreamDecode');
  late final _OgaTokenizerStreamDecode =
      _OgaTokenizerStreamDecodePtr.asFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTokenizerStream>, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<OgaResult> OgaCreateTensorFromBuffer(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Int64> shape_dims,
    int shape_dims_count,
    OgaElementType element_type,
    ffi.Pointer<ffi.Pointer<OgaTensor>> out,
  ) {
    return _OgaCreateTensorFromBuffer(
      data,
      shape_dims,
      shape_dims_count,
      element_type.value,
      out,
    );
  }

  late final _OgaCreateTensorFromBufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<OgaResult> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int64>,
                  ffi.Size,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<OgaTensor>>)>>(
      'OgaCreateTensorFromBuffer');
  late final _OgaCreateTensorFromBuffer =
      _OgaCreateTensorFromBufferPtr.asFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<OgaTensor>>)>();

  void OgaDestroyTensor(
    ffi.Pointer<OgaTensor> tensor,
  ) {
    return _OgaDestroyTensor(
      tensor,
    );
  }

  late final _OgaDestroyTensorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OgaTensor>)>>(
          'OgaDestroyTensor');
  late final _OgaDestroyTensor =
      _OgaDestroyTensorPtr.asFunction<void Function(ffi.Pointer<OgaTensor>)>();

  ffi.Pointer<OgaResult> OgaTensorGetType(
    ffi.Pointer<OgaTensor> arg0,
    ffi.Pointer<ffi.UnsignedInt> out,
  ) {
    return _OgaTensorGetType(
      arg0,
      out,
    );
  }

  late final _OgaTensorGetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTensor>,
              ffi.Pointer<ffi.UnsignedInt>)>>('OgaTensorGetType');
  late final _OgaTensorGetType = _OgaTensorGetTypePtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaTensor>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<OgaResult> OgaTensorGetShapeRank(
    ffi.Pointer<OgaTensor> arg0,
    ffi.Pointer<ffi.Size> out,
  ) {
    return _OgaTensorGetShapeRank(
      arg0,
      out,
    );
  }

  late final _OgaTensorGetShapeRankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTensor>,
              ffi.Pointer<ffi.Size>)>>('OgaTensorGetShapeRank');
  late final _OgaTensorGetShapeRank = _OgaTensorGetShapeRankPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaTensor>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<OgaResult> OgaTensorGetShape(
    ffi.Pointer<OgaTensor> arg0,
    ffi.Pointer<ffi.Int64> shape_dims,
    int shape_dims_count,
  ) {
    return _OgaTensorGetShape(
      arg0,
      shape_dims,
      shape_dims_count,
    );
  }

  late final _OgaTensorGetShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTensor>,
              ffi.Pointer<ffi.Int64>, ffi.Size)>>('OgaTensorGetShape');
  late final _OgaTensorGetShape = _OgaTensorGetShapePtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaTensor>, ffi.Pointer<ffi.Int64>, int)>();

  ffi.Pointer<OgaResult> OgaTensorGetData(
    ffi.Pointer<OgaTensor> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> out,
  ) {
    return _OgaTensorGetData(
      arg0,
      out,
    );
  }

  late final _OgaTensorGetDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(ffi.Pointer<OgaTensor>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('OgaTensorGetData');
  late final _OgaTensorGetData = _OgaTensorGetDataPtr.asFunction<
      ffi.Pointer<OgaResult> Function(
          ffi.Pointer<OgaTensor>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<OgaResult> OgaSetCurrentGpuDeviceId(
    int device_id,
  ) {
    return _OgaSetCurrentGpuDeviceId(
      device_id,
    );
  }

  late final _OgaSetCurrentGpuDeviceIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OgaResult> Function(ffi.Int)>>(
          'OgaSetCurrentGpuDeviceId');
  late final _OgaSetCurrentGpuDeviceId = _OgaSetCurrentGpuDeviceIdPtr
      .asFunction<ffi.Pointer<OgaResult> Function(int)>();

  ffi.Pointer<OgaResult> OgaGetCurrentGpuDeviceId(
    ffi.Pointer<ffi.Int> device_id,
  ) {
    return _OgaGetCurrentGpuDeviceId(
      device_id,
    );
  }

  late final _OgaGetCurrentGpuDeviceIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OgaResult> Function(
              ffi.Pointer<ffi.Int>)>>('OgaGetCurrentGpuDeviceId');
  late final _OgaGetCurrentGpuDeviceId = _OgaGetCurrentGpuDeviceIdPtr
      .asFunction<ffi.Pointer<OgaResult> Function(ffi.Pointer<ffi.Int>)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class max_align_t extends ffi.Opaque {}

enum OgaElementType {
  OgaElementType_undefined(0),
  OgaElementType_float32(1),
  OgaElementType_uint8(2),
  OgaElementType_int8(3),
  OgaElementType_uint16(4),
  OgaElementType_int16(5),
  OgaElementType_int32(6),
  OgaElementType_int64(7),
  OgaElementType_string(8),
  OgaElementType_bool(9),
  OgaElementType_float16(10),
  OgaElementType_float64(11),
  OgaElementType_uint32(12),
  OgaElementType_uint64(13);

  final int value;
  const OgaElementType(this.value);

  static OgaElementType fromValue(int value) => switch (value) {
        0 => OgaElementType_undefined,
        1 => OgaElementType_float32,
        2 => OgaElementType_uint8,
        3 => OgaElementType_int8,
        4 => OgaElementType_uint16,
        5 => OgaElementType_int16,
        6 => OgaElementType_int32,
        7 => OgaElementType_int64,
        8 => OgaElementType_string,
        9 => OgaElementType_bool,
        10 => OgaElementType_float16,
        11 => OgaElementType_float64,
        12 => OgaElementType_uint32,
        13 => OgaElementType_uint64,
        _ => throw ArgumentError("Unknown value for OgaElementType: $value"),
      };
}

final class OgaResult extends ffi.Opaque {}

final class OgaGeneratorParams extends ffi.Opaque {}

final class OgaGenerator extends ffi.Opaque {}

final class OgaModel extends ffi.Opaque {}

final class OgaSequences extends ffi.Opaque {}

final class OgaTokenizer extends ffi.Opaque {}

final class OgaTokenizerStream extends ffi.Opaque {}

final class OgaTensor extends ffi.Opaque {}

final class OgaImages extends ffi.Opaque {}

final class OgaNamedTensors extends ffi.Opaque {}

final class OgaMultiModalProcessor extends ffi.Opaque {}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;
